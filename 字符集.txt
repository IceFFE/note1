------------------------------------------------------------------------
------------------------------------------------------------------------
1. ASCI 推出 ASCII

2. 中国人民通过对 ASCII 编码的中文扩充改造，产生了 GB2312 编码，可以表示6000多个常用汉字，区分全角半角。

3. 汉字实在是太多了，包括繁体和各种字符，于是产生了 GBK 编码，它包括了 GB2312 中的编码，同时扩充了很多。

4. 中国是个多民族国家，各个民族几乎都有自己独立的语言系统，为了表示那些字符，继续把 GBK 编码扩充为 GB18030 编码。

5. 每个国家都像中国一样，把自己的语言编码，于是出现了各种各样的编码，如果你不安装相应的编码，就无法解释相应编码想表达的内容。

6. 终于，有个叫 ISO 的组织看不下去了。他们一起创造了一种编码 UNICODE。两字节存储一个字符。

	1. 0x000000-0x10FFFF: 共17个平面，每个平面65536

7. UNICODE 在网络传输中，出现了两个标准 UTF-8 和 UTF-16，分别每次传输 8个位和 16个位。


------------------------------------------------------------------------
------------------------------------------------------------------------
UNICODE
------------------ 17 个平面 ------------------
0x000000 - 0x00FFFF 基本多文种平面 BMP
0x010000 - 0x01FFFF 多文种补充平面 SMP
0x020000 - 0x02FFFF 表意文字补充平面 SIP
......
0x0F0000 - 0x0FFFFF 保留作为私人使用区（A区）PUA-A
0x100000 - 0x10FFFF 保留作为私人使用区（B区）PUA-B


------------------ UTF-8 ------------------
1. 多字节编码

0x000000 - 0x00007F  0xxxxxxx

0x000080 - 0x0007FF  110xxxxx 10xxxxxx

0x000800 - 0x00FFFF  1110xxxx 10xxxxxx 10xxxxxx

0x010000 - 0x10FFFF  11110xxx10xxxxxx10xxxxxx10xxxxxx


------------------ UTF-16 ------------------
2. 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。

因为在基本平面立面的 0xD800 - 0xDFFF 强制空位，
基本面的用2个字节，辅助面的用4个字节

0xD800 === 0b1101100000000000
0xDBFF === 0b1101101111111111
0xDC00 === 0b1101110000000000
0xDFFF === 0b1101111111111111

前 10 位映射在 U+D800 到 U+DBFF，称为高位（H）
后 10 位映射在 U+DC00 到 U+DFFF，称为低位（L）

16个辅面，从 U+10000 到 U+10FFFF，共 0xFFFFF 个码位，2(20)

UTF-16的大尾序(BE)和小尾序(LE)存储形式都在用。
一般来说，以Macintosh制作或存储的文字使用大尾序格式，
以Microsoft或Linux制作或存储的文字使用小尾序格式。

------------------ UTF-32 ------------------
直接四个字节显示: 0x00000000 - 0x0010FFFF


-------------------------------------------------------------------------
--------------------------- 字节顺序标记(BOM) ---------------------------

UTF-8     EF BB FE 
UTF-16LE  FF FE
UTF-16HE  FE FF
UTF-32BE  00 00 FE FF
UTF-32LE  FF FE 00 00


--------------------------- "𠮷" ---------------------------
汉字"𠮷"（古汉字，不是吉利的吉）的 Unicode 码点为 0x20BB7，

该码点显然超出了基本平面的范围（0x0000 - 0xFFFF），因此需要使用四个字节表示。

首先用 0x20BB7 - 0x10000 计算出超出的部分0x10BB7，

然后将其用 20 个二进制位表示（不足前面补 0 ），结果为 0001 0000 1011 1011 0111。

接着，将前 10 位映射到 U+D800 到 U+DBFF 之间，后 10 位映射到 U+DC00 到 U+DFFF 即可。

U+D800 对应的二进制数为 1101100000000000，直接填充后面的 10 个二进制位，得到 1101100001000010，高位为 0xD842。

U+DC00对应的二进制为1101110000000000，加上后10位的1101 1111 1011 0111 低位为 0xDFB7。

因此得出汉字"𠮷"的 UTF-16 编码为 0xD842 0xDFB7。常用"\uD842\uDFB7"表示。

UTF-16be  D8 42 DF B7
UTF-16le  42 D8 B7 DF 


+-- a
| +-- a.1
| `-- a.2
|   +-- a.2.1
|   +-- a.2.2
|   `-- a.2.3
`-- b
  +-- b.1
  `-- b.2